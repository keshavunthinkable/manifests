pipeline {
  
    agent any 
    
    
    environment { 
        //DOCKER_HUB_PASSWORD = credentials('dockerhub-password')
        DOCKER_HUB_USERNAME = 'keshw2025'
        DOCKER_TAG = 'latest' // Set your desired tag (e.g., 'latest', 'v1.0', etc.)
        DOCKER_IMAGE = 'keshw2025/javaproject'
        DOCKER_IMAGE_URL = "${DOCKER_IMAGE}:${DOCKER_TAG}" // Create a full image URL

    
    }

    stages{
        stage("Job Triggered Notification "){
            steps{
                script{
                    echo 'Job triggered successfullly.'
                    sendEmail(
                        "Jenkins Pipeline Tirggered : ${env.JOB_NAME} {Build #${env.BUILD_NUMBER}}",
                        """keshw2025/javaproject
                            The Jenkins pipeline has been triggered.<br><br>
                            <b>Project:</b> ${env.JOB_NAME}<br>
                            <b>Build Number:</b> ${env.BUILD_NUMBER}<br>
                            <b>Build URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>
                        """
                        )
                        
                }
            }
        } 
        
        
        stage('Creating a Full URL for Docker Image') {
            steps {
                script { 
                    // Construct and echo the full Docker image URL
                    echo "Docker Image URL: ${env.DOCKER_IMAGE_URL}"
                }
            }
        }
        
        
        stage('cloing into a repo '){
            steps { 
                git credentialsId: 'github-access-token', url: 'https://github.com/keshavunthinkable/java-project.git'
            }
        }
        stage('Sonar') {
            steps {
                sh 'sonar-scanner \
                      -Dsonar.projectKey=java-helloworld \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=http://localhost:9000 \
                      -Dsonar.token=sqp_6ead414e2a197db85b50fdd1f89b445eaa13440c'
            }
        }
        
        stage('check java installations') {
            steps {
                sh """
                echo " cloning the java version"
                java --version
                """
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh """
                echo "Building the Docker image..."
                docker build -t hello-world-java .
                """
            }
        }
        
        stage('Gitleaks Scan') {
            steps {
                script {
                    // Scan the repository for exposed secrets or hardcoded values.
                    sh '''
                        gitleaks detect \
                            --source . \
                            --verbose \
                            --report-format csv \
                            --exit-code 0 \
                            --report-path gitleaks-report.csv
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                sh """
                echo "Running the Docker container..."
                docker run --rm hello-world-java
                """
            }
        }
        
        
        
        
        stage('Tag and Push Docker Image') {
            steps {
                script {
                    // Authenticate Docker to Docker Hub using credentials
                    withCredentials([string(credentialsId: 'dockerhub-password', variable: 'DOCKER_HUB_PASSWORD')]) {
                        sh '''
                            echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
                        '''
                        
                        // Tag the Docker image
                        sh '''
                            docker tag hello-world-java:latest ${DOCKER_IMAGE_URL}
                        '''
                        
                        // Push the Docker image to Docker Hub
                        sh '''
                            docker push ${DOCKER_IMAGE_URL}
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            sendEmail("Success", "Good news! The build was successful.")
        }
        failure {
            sendEmail("Failed", "Unfortunately, the build has failed.")
        }
        always {
            sendEmail("Completed", "The build has completed.")
        }
    }
}
def sendEmail(status, message) {
    emailext(
        subject: "Jenkins Job '${env.JOB_NAME}' - Build #${env.BUILD_NUMBER} - ${status}",
        body: "${message}\n\nCheck console output at ${env.BUILD_URL}",
        recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']],
        to: "keshav.mittal@unthinkable.co" // Using the defined environment variable for the email address
    )

}
